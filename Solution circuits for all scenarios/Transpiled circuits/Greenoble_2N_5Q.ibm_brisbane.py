# Circuito transpilado automÃ¡ticamente
# ÃŸackend : ibm_brisbane
# Time: 0.22541093826293945
from qiskit import QuantumCircuit

class TranspiledCircuit:
	def __init__(self, qubits=None):
		original_qubits = [56, 57, 58, 59, 71]
		self.qubits = range(0, 5)  if qubits is None else original_qubits

	def get_circuit(self, targetQubits=None):
		circuit = QuantumCircuit(127, 5)
		if targetQubits is None:
			targetQubits = self.qubits
		circuit.rz(-3.141592653589793, targetQubits[0])
		circuit.sx(targetQubits[0])
		circuit.rz(-1.5707963267948966, targetQubits[0])
		circuit.rz(-1.570796326794897, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(-1.428899272190733, targetQubits[1])
		circuit.sx(targetQubits[2])
		circuit.rz(-1.5707963267948966, targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(-3.141592653589793, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.rz(2.35619446833665, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.x(targetQubits[1])
		circuit.rz(3.0703264750637604, targetQubits[1])
		circuit.ecr(targetQubits[0], targetQubits[1])
		circuit.rz(-3.141592653589793, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(2.35619446833665, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.ecr(targetQubits[0], targetQubits[1])
		circuit.rz(2.35619446833665, targetQubits[0])
		circuit.rz(-2.9284294204595938, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(-3.141592653589793, targetQubits[1])
		circuit.rz(-0.7853981415417532, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(-1.570796326794897, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(-3.141592653589793, targetQubits[1])
		circuit.rz(1.5707963267948966, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(1.5707963267948966, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(1.5707963267948966, targetQubits[1])
		circuit.rz(-1.5707963267948966, targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(-1.5707963267948966, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(2.6265251156776, targetQubits[1])
		circuit.rz(1.5707963267948966, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.sx(targetQubits[3])
		circuit.rz(-1.570796326794897, targetQubits[3])
		circuit.ecr(targetQubits[2], targetQubits[3])
		circuit.rz(-3.141592653589793, targetQubits[3])
		circuit.sx(targetQubits[3])
		circuit.rz(2.35619446833665, targetQubits[3])
		circuit.sx(targetQubits[3])
		circuit.ecr(targetQubits[2], targetQubits[3])
		circuit.rz(-3.141592653589793, targetQubits[2])
		circuit.x(targetQubits[2])
		circuit.rz(2.35619451204804, targetQubits[3])
		circuit.rz(-3.1415926535897927, targetQubits[4])
		circuit.sx(targetQubits[4])
		circuit.rz(1.5707963267948966, targetQubits[4])
		circuit.ecr(targetQubits[2], targetQubits[4])
		circuit.rz(-3.141592653589793, targetQubits[4])
		circuit.sx(targetQubits[4])
		circuit.rz(2.35619446833665, targetQubits[4])
		circuit.sx(targetQubits[4])
		circuit.ecr(targetQubits[2], targetQubits[4])
		circuit.rz(1.700714807973883, targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(-3.141592653589793, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.rz(2.35619446833665, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(-1.8411269304244573, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(-3.141592653589793, targetQubits[1])
		circuit.ecr(targetQubits[0], targetQubits[1])
		circuit.rz(-1.570796326794897, targetQubits[0])
		circuit.sx(targetQubits[0])
		circuit.rz(-3.141592653589793, targetQubits[0])
		circuit.rz(1.5707963267948966, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.ecr(targetQubits[0], targetQubits[1])
		circuit.rz(1.5707963267948966, targetQubits[0])
		circuit.sx(targetQubits[0])
		circuit.rz(1.5707963267948966, targetQubits[0])
		circuit.rz(-1.5707963267948966, targetQubits[1])
		circuit.ecr(targetQubits[0], targetQubits[1])
		circuit.sx(targetQubits[0])
		circuit.rz(-1.5707963267948966, targetQubits[0])
		circuit.x(targetQubits[1])
		circuit.rz(1.1820722811838493, targetQubits[1])
		circuit.rz(-0.08684935323511311, targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(-3.141592653589793, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.rz(2.35619446833665, targetQubits[2])
		circuit.sx(targetQubits[2])
		circuit.ecr(targetQubits[1], targetQubits[2])
		circuit.rz(1.1741222308641905, targetQubits[1])
		circuit.sx(targetQubits[1])
		circuit.rz(-3.141592653589793, targetQubits[1])
		circuit.x(targetQubits[2])
		circuit.rz(1.613865454738769, targetQubits[2])
		circuit.ecr(targetQubits[2], targetQubits[3])
		circuit.rz(-3.141592653589793, targetQubits[3])
		circuit.sx(targetQubits[3])
		circuit.rz(2.35619446833665, targetQubits[3])
		circuit.sx(targetQubits[3])
		circuit.ecr(targetQubits[2], targetQubits[3])
		circuit.x(targetQubits[2])
		circuit.rz(1.5707963267948966, targetQubits[2])
		circuit.rz(0.7853981415417532, targetQubits[3])
		circuit.sx(targetQubits[3])
		circuit.x(targetQubits[4])
		circuit.rz(0.7853981852531429, targetQubits[4])
		circuit.ecr(targetQubits[2], targetQubits[4])
		circuit.x(targetQubits[2])
		circuit.rz(-1.5707963267948966, targetQubits[2])
		circuit.rz(-3.141592653589793, targetQubits[4])
		circuit.sx(targetQubits[4])
		circuit.rz(-2.35619446833665, targetQubits[4])
		circuit.ecr(targetQubits[2], targetQubits[4])
		circuit.x(targetQubits[2])
		circuit.sx(targetQubits[4])
		circuit.rz(3.9269908388429364, targetQubits[4])
		circuit.sx(targetQubits[4])
		circuit.rz(9.42477796076938, targetQubits[4])
		#circuit.measure(targetQubits[4], 0)
		#circuit.measure(targetQubits[3], 1)
		#circuit.measure(targetQubits[1], 2)
		#circuit.measure(targetQubits[0], 3)
		#circuit.measure(targetQubits[2], 4)
		#print(circuit)
		return circuit


if __name__ == "__main__":
	tc = TranspiledCircuit()
	tc.get_circuit()